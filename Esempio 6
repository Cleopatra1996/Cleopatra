import pandas as pd
from fuzzywuzzy import process
import mysql.connector
from datetime import datetime

# Connessione al database

try:
    cnx = mysql.connector.connect(user='superandreani', password='franzandreani',
                                  host='10.20.0.51', database='cinetel4', raise_on_warnings=True)
    cur = cnx.cursor()

    # Query per l'estrazione dei dati dal database
    comuni_query = "SELECT citta FROM cinetel4.citta ORDER BY citta ASC;"
    denominazioni_query = "SELECT SUBSTRING_INDEX(nome_cinema, '-', 1) AS nome_cinema FROM cinetel4.anag_cinema WHERE nome_cinema NOT LIKE '%-%' ORDER BY nome_cinema ASC;"
    titolo_query = "SELECT titolo FROM cinetel4.anagrafica_film ORDER BY titolo ASC;"
    data_query = "SELECT ultima_program FROM cinetel4.anagrafica_film ORDER BY ultima_program;"
    incasso_query = " SELECT incasso FROM cinetel4.anagrafica_film  WHERE incasso ORDER BY incasso ASC  ;"
    capienza_query = "SELECT presenze FROM cinetel4.anagrafica_film  WHERE presenze ORDER BY presenze ASC"
    # Esecuzione delle query
    cur.execute(comuni_query)
    comuni_db = set([row[0].strip() for row in cur.fetchall()])
    comuni_db_str = [str(c) for c in comuni_db if isinstance(c, str)]
    cur.execute(denominazioni_query)
    denominazioni_db = set([row[0].strip() for row in cur.fetchall()])
    denominazioni_db_str = [str(c) for c in denominazioni_db if isinstance(c, str)]
    cur.execute(titolo_query)
    titolo_db = set([row[0].strip() for row in cur.fetchall()])
    titolo_db_str = [str(c) for c in titolo_db if isinstance(c, str)]
    cur.execute(data_query)
    data_db = set([row[0].strftime('%d-%m-%Y').strip() for row in cur.fetchall()])
    data_db_str = [str(c) for c in data_db if isinstance(c, str)]
    cur.execute(capienza_query)
    capienza_db = set([str(row[0]).strip() for row in cur.fetchall()])
    capienza_db_str = [str(c) for c in capienza_db if isinstance(c, str)]

    cur.execute(incasso_query)
    incasso_db = set([str(row[0]).strip() for row in cur.fetchall()])
    incasso_db_str = [str(c) for c in incasso_db if isinstance(c, str)]



    # Caricamento del file Excel
    excel_dataframe = pd.read_excel('PERIODO CORRENTE MEDUSA.xls')
    # Rimuovi gli spazi bianchi da tutte le colonne del DataFrame
    excel_dataframe = excel_dataframe.apply(lambda x: x.str.strip() if x.dtype == "object" else x)
    print(excel_dataframe.loc[4])

    # stampare il valore della cella
    print(excel_dataframe.iloc[1:400 ])

    # accedi alla cella "Distinte considerate:"

    # accedi alla cella "Settimana dal 23/03/2023 al 29/03/2023"
    settimana = excel_dataframe.iloc[1, 3]
    # stampa i valori delle due celle
    print("Distinte considerate:", settimana)

    # Estrazione dei dati dal dataframe Excel
    comuni_excel = set(excel_dataframe.iloc[:, 2].dropna().str.strip().tolist())  # Colonna C (Comune)
    denominazioni_excel = set(excel_dataframe.iloc[:, 4].dropna().str.strip().tolist())  # Colonna E (Denominazione)
    titolo_excel = set(excel_dataframe.iloc[:, 9].dropna().str.strip().tolist())  # Colonna J (Titolo)
    data_excel = excel_dataframe.iloc[4,13].str.strip().apply(lambda x: x.strftime('%d/%m/%Y') if isinstance(x, pd.Timestamp) else x).dropna().tolist()
    capienza_excel = set(excel_dataframe.iloc[:, 21].astype(str).str.strip())
    incasso_excel = set(excel_dataframe.iloc[:, 24].astype(str).str.strip())

    excel_dataframe.iloc[:, 2] = excel_dataframe.iloc[:, 2].str.strip()  # Colonna A (Comune)
    excel_dataframe.iloc[:, 4] = excel_dataframe.iloc[:, 4].str.strip()  # Colonna B (Denominazione)
    excel_dataframe.iloc[:, 9] = excel_dataframe.iloc[:, 9].str.strip() # Colonna C (Titolo)
    excel_dataframe.iloc[4, 13] = excel_dataframe.iloc[4 , 13].str.strip()
    excel_dataframe.iloc[:, 21] = excel_dataframe.iloc[:, 21].str.strip()
    excel_dataframe.iloc[:, 24] = excel_dataframe.iloc[:, 24].str.strip()


    match_threshold = 0.8  # 80%

    # -----------------------------------------------------------------------------------------#

    # Crea un set di Comuni Excel senza la parte dopo il trattino
    comuni_excel_no_desc = set(comuni_excel)
    comuni_db_str_no_desc = set(comuni_db_str)
    comuni_not_in_db = comuni_excel_no_desc - set(comuni_db_str_no_desc)
    # Crea un set di denominazioni Excel senza la parte dopo il trattino
    denominazioni_excel_no_desc = {nome.split(" - ")[0] for nome in denominazioni_excel if isinstance(nome, str)}

    # Stampa dei dati non presenti nel database
    denominazioni_db_str_no_desc = {nome.split(" - ")[0] for nome in denominazioni_db_str}
    denominazioni_not_in_db = denominazioni_excel_no_desc - set(denominazioni_db_str_no_desc)
    titolo_excel_no_desc = {nome.split(" - ")[0] for nome in titolo_excel if isinstance(nome, str)}
    # Stampa dei dati non presenti nel database
    titolo_db_str_no_desc = {nome.split(" - ")[0] for nome in titolo_db_str}
    titolo_not_in_db = titolo_excel_no_desc - set(titolo_db_str_no_desc)
    data_excel_no_desc = {datetime.strptime(nome, '%Y/%m/%d').strftime("%Y/%m/%d") for nome in data_excel}
    print(data_excel_no_desc)
    #
    # # Extract date strings in database format
    data_excel_db_str_no_desc = {nome.strftime('%d-%m-%Y') for nome in data_excel}
    # # Find dates not in database
    data_excel_not_in_db = data_excel_no_desc - set(data_excel_db_str_no_desc)
    capienza_excel_no_desc = set(capienza_excel)
    capienza_db_str_no_desc = set(capienza_db_str)
    capienza_not_in_db = capienza_excel_no_desc - set(capienza_db_str_no_desc)
    incasso_excel_no_desc = set(incasso_excel)
    incasso_db_str_no_desc = set(incasso_db_str)
    incasso_not_in_db = incasso_excel_no_desc - set(incasso_db_str_no_desc)


    def levenshtein_distance(s, t):
        m, n = len(s), len(t)
        d = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m + 1):
            d[i][0] = i
        for j in range(n + 1):
            d[0][j] = j
        for j in range(1, n + 1):
            for i in range(1, m + 1):
                if s[i - 1] == t[j - 1]:
                    d[i][j] = d[i - 1][j - 1]
                else:
                    d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + 1)
        return d[m][n]


    def correct_spelling(word, dictionary):
        min_distance = float('inf')
        closest_word = None
        for w in dictionary:
            distance = levenshtein_distance(word, w)
            if distance < min_distance:
                min_distance = distance
                closest_word = w
        return closest_word


    import textdistance


    def correct_spelling(word, dictionary):
        max_similarity = 0
        closest_word = None
        for w in dictionary:
            similarity = textdistance.jaccard(word, w)
            if similarity > max_similarity:
                max_similarity = similarity
                closest_word = w
        return closest_word



    if comuni_not_in_db:
        print("\nComuni presenti nel file Excel ma non nel database:")
        for comuni in comuni_not_in_db:
            match = process.extractOne(comuni, comuni_db_str)
            if match is not None and match[1] >= 80:
                citta = match[0]
                query = "SELECT progress_citta FROM cinetel4.citta WHERE citta = %s ORDER BY citta ASC;"
                cur.execute(query, (citta,))
                result = cur.fetchall()
                if result:
                    progress_citta = result[0][0]
                    print(
                        f"- {comuni} (potrebbe corrispondere a {match[0]} al {match[1]} %, progress_citta ={progress_citta})")
                else:
                    print(
                        f"- {comuni} (potrebbe corrispondere a {match[0]} al {match[1]} %, ma progress_citta non trovato)")
            else:
                print(f"- {comuni} (nessuna corrispondenza trovata nel database)")

            # Stampa dei dati per comuni non presenti nel file Excel
        comuni_not_in_excel = set(comuni_db_str) - comuni_excel_no_desc

        if comuni_not_in_excel:
            print("\nComuni presenti nel database ma non nel file Excel:")
            for comune in comuni_not_in_excel:
                query = "SELECT progress_citta FROM cinetel4.citta WHERE citta = %s"
                cur.execute(query, (comune,))
                result = cur.fetchall()
                if result:
                    progress_citta = result[0][0]
                    print(f"- {comune} (progress_citta = {progress_citta})")
                else:
                    print(f"- {comune} (progress_citta non trovato)")

    if denominazioni_not_in_db:
        print("\nDenominazioni presenti nel file Excel ma non nel database:")
        for denominazione in denominazioni_not_in_db:
            match = process.extractOne(denominazione, denominazioni_db_str)
            if match[1] >= 80:
                cinema_name = match[0]
                query = "SELECT progress_cinema FROM cinetel4.anag_cinema WHERE nome_cinema =%s ORDER BY nome_cinema ASC "

                cur.execute(query, (cinema_name,))
                result = cur.fetchall()
                if result:
                    progress_cinema = result[0][0]
                    print(
                        f"- {denominazione} (potrebbe corrispondere a {match[0]} al {match[1]} %, progress_cinema={progress_cinema})")
                else:
                    print(
                        f"- {denominazione} (potrebbe corrispondere a {match[0]} al {match[1]} %, ma progress_cinema non trovato)")
            else:
                print(f"- {denominazione} (nessuna corrispondenza trovata nel database)")

        # results = []

        # if denominazioni_not_in_db:
        #     print("\nDenominazioni presenti nel file Excel ma non nel database:")
        #     for denominazione in denominazioni_not_in_db:
        #         match = process.extractOne(denominazione, denominazioni_db_str)
        #         if match[1] >= 80:
        #             results.append(
        #                 {'Denominazione Excel': denominazione, 'Denominazione DB': match[0], 'Match %': match[1]})
        #         else:
        #             results.append({'Denominazione Excel': denominazione, 'Denominazione DB': '', 'Match %': 0})
        #
        # if results:
        #     df = pd.DataFrame(results)
        #     print(df)

        # Stampa dei dati non presenti nel file Excel
        denominazioni_not_in_excel = set(denominazioni_db_str) - denominazioni_excel_no_desc

        if titolo_not_in_db:
            print("\nTitolo presenti nel file Excel ma non nel database:")
            for titolo in titolo_not_in_db:
                match = process.extractOne(titolo, titolo_db_str)
                if match[1] >= 0.8:
                    titolo = match[0]
                    query = "SELECT progress_film FROM cinetel4.anagrafica_film WHERE titolo =%s ORDER BY titolo ASC "

                    cur.execute(query, (titolo,))
                    result = cur.fetchall()
                    if result:
                        progress_film = result[0][0]
                        print(
                            f"- {titolo} (potrebbe corrispondere a {match[0]} al {match[1]} %, progress_film ={progress_film})")
                    else:
                        print(
                            f"- {titolo} (potrebbe corrispondere a {match[0]} al {match[1]} %, ma progress_film non trovato)")
                else:
                    print(f"- {titolo} (nessuna corrispondenza trovata nel database)")
        # Stampa dei dati per comuni non presenti nel file Excel
        titolo_not_in_excel = set(titolo_db_str) - titolo_excel_no_desc

        if titolo_not_in_excel:
            print("\nTitolo presenti nel database ma non nel file Excel:")
            for titolo in titolo_not_in_excel:
                query = "SELECT progress_film FROM cinetel4.anagrafica_film WHERE titolo =%s  ;"
                cur.execute(query, (titolo,))
                result = cur.fetchall()
                if result:
                    progress_film = result[0][0]
                    print(f"- {titolo} (progress_film = {progress_film})")
                else:
                    print(f"- {titolo} (progress_film non trovato)")
            # Stampa dei dati non presenti nel file Excel
        titolo_not_in_excel = set(titolo_db_str) - titolo_excel_no_desc
    # # -----------------------------------------------DATA-------------------------------------------#
    # # Calcolo delle date presenti nel file Excel ma non nel database
    data_excel_db_str = set([data.strftime('%Y-%m-%d') for data in data_excel])
    query = "SELECT ultima_program FROM cinetel4.anagrafica_film  ORDER BY ultima_program ASC ;"
    cur.execute(query, )
    data_excel_excel = cur.fetchall()
    data_excel_excel_str = set([data[0].strftime('%d/%m/%Y') for data in data_excel_excel])
    data_excel_not_in_db = data_excel_excel_str - data_excel_db_str

    if data_excel_not_in_db:
        print("\nData presenti nel file Excel ma non nel database:")
    for data in data_excel_not_in_db:
        match = process.extractOne(data, data_excel_no_desc)
        if match is not None and match[1] >= 0.8:
            data = match[0]

            query = "SELECT ultima_program FROM cinetel4.anagrafica_film  ORDER BY ultima_program ASC ; "

            cur.execute(query, (data,))
            result = cur.fetchall()
            if result:
                ultima_program = result[0][0]
                print(
                    f"- {data} (potrebbe corrispondere a {match[0]} al {match[1]} %, ultima_program ={ultima_program})")
            else:
                print(
                    f"- {data} (potrebbe corrispondere a {match[0]} al {match[1]} %, ma ultima_program non trovato)")
        else:
            print(f"- {data} (nessuna corrispondenza trovata nel database)")

    # Calcolo delle date presenti nel database ma non nel file Excel
    data_excel_db_str = set([data.strftime('%d-%m-%Y') for data in data_excel])
    query = "SELECT ultima_program FROM cinetel4.anagrafica_film  ORDER BY ultima_program ASC ; "
    cur.execute(query, )
    data_excel_excel = cur.fetchall()
    data_excel_excel_str = set([data[0].strftime('%d-%m-%Y') for data in data_excel_excel])
    data_excel_not_in_excel = data_excel_db_str - data_excel_excel_str

    # Stampa dei dati per comuni non presenti nel file Excel
    if data_excel_not_in_excel:
        print("\nData presenti nel database ma non nel file Excel:")
        for data in data_excel_not_in_excel:
            query = "SELECT ultima_program FROM cinetel4.anagrafica_film WHERE ultima_program = %s ORDER BY ultima_program ;"
            cur.execute(query, (data,))
            result = cur.fetchall()
            if result:
                ultima_program = result[0][0]
                print(f"- {data} (ultima_program = {ultima_program})")
            else:
                print(f"- {data} (progress_film non trovato)")
    #
    #         # Stampa dei dati per comuni non presenti nel file Excel
    #


    if capienza_not_in_db:
        print("\nCapienza dei posti presenti nel file Excel ma non nel database:")
        for capienza in capienza_not_in_db:
            match = process.extractOne(capienza, capienza_db_str)
            if match is not None and match[1] >= 80:
                capienza = match[0]
                query = "select numero_posti from cinetel4.sale_attributi WHERE progress_cinema = %s;"
                cur.execute(query, (capienza,))
                result = cur.fetchall()
                if result:
                    capienza = result[0][0]
                    print(
                        f"- {capienza} (potrebbe corrispondere a {match[0]} al {match[1]} %, capienza ={capienza})")
                else:
                    print(
                        f"- {capienza} (potrebbe corrispondere a {match[0]} al {match[1]} %, ma la capienza non trovato)")
            else:
                print(f"- {capienza} (nessuna corrispondenza trovata nel database)")

            # Stampa dei dati per comuni non presenti nel file Excel
        capienza_not_in_excel = set(capienza_db_str) - capienza_excel_no_desc

        if capienza_not_in_excel:
            print("\nCapienza dei posti presenti nel database ma non nel file Excel:")
            for capienza in capienza_not_in_excel:
                query = "select numero_posti from cinetel4.sale_attributi WHERE progress_cinema = %s;"
                cur.execute(query, (capienza,))
                result = cur.fetchall()
                if result:
                    capienza = result[0][0]
                    print(f"- {capienza} (capienza  = {capienza})")
                else:
                    print(f"- {capienza} (capienza non trovato)")


    if incasso_not_in_db:
        print("\nIncassi presenti nel file Excel ma non nel database:")
        for incasso in incasso_not_in_db:
            match = process.extractOne(incasso, incasso_db_str)
            if match is not None and match[1] >= 80:
                incasso = match[0]
                query = "SELECT incasso FROM cinetel4.anagrafica_film  WHERE incasso ORDER BY incasso ASC  ;"
                cur.execute(query, (incasso,))
                result = cur.fetchall()
                if result:
                    incasso = result[0][0]
                    print(
                        f"- {incasso} (potrebbe corrispondere a {match[0]} al {match[1]} %, incasso ={incasso})")
                else:
                    print(
                        f"- {incasso} (potrebbe corrispondere a {match[0]} al {match[1]} %, ma incasso non trovato)")
            else:
                print(f"- {incasso} (nessuna corrispondenza trovata nel database)")

            # Stampa dei dati per comuni non presenti nel file Excel
        incasso_not_in_excel = set(incasso_db_str) - incasso_excel_no_desc

        if incasso_not_in_excel:
            print("\nIncassi presenti nel database ma non nel file Excel:")
            for incasso in incasso_not_in_excel:
                query = "SELECT incasso FROM cinetel4.anagrafica_film  WHERE incasso ORDER BY incasso ASC  ;"
                cur.execute(query, (incasso,))
                result = cur.fetchall()
                if result:
                    incasso = result[0][0]
                    print(f"- {incasso} (incasso = {incasso})")
                else:
                    print(f"- {incasso} (incasso non trovato)")


except mysql.connector.Error as err:
    print(f"Errore nella connessione al database: {err}")



finally:
    cur.close()
    cnx.close()

# SERVE PER CREARE IL FILE EXCEL CON I RISULTATI

# result_data.append([denominazione, match[0], match[1]])
#        else:
#            result_data.append([denominazione, "nessuna corrispondenza trovata nel database"])
#    result_df = pd.DataFrame(result_data, columns=["Denominazione Excel", "Denominazione DB", "Percentuale match"])
#    result_df.to_excel("risultati.xlsx", index=False)
